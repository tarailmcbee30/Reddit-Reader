using Microsoft.Extensions.Options;
using Reddit.AuthTokenRetriever;
using RedditReader.Models;
using System.Diagnostics;

namespace RedditReader.Services
{
    public class RedditAuthService : IRedditAuthService
    {
        private readonly RedditVariables _redditVariables;
        private readonly SystemVariables _systemVariables;

        private AuthTokenRetrieverLib authTokenRetrieverLib;

        public RedditAuthService(IOptions<RedditVariables> redditOptions, IOptions<SystemVariables> systemOptions)
        {
            _redditVariables = redditOptions.Value;
            _systemVariables = systemOptions.Value;
        }

        public string GetAccessToken()
        {
            // Create a new instance of the auth token retrieval library.  --Kris
            authTokenRetrieverLib = new AuthTokenRetrieverLib(_redditVariables.AppId, _redditVariables.AppSecret, _systemVariables.ListeningPort);

            // Start the callback listener.  --Kris
            authTokenRetrieverLib.AwaitCallback();

            Console.Clear();
            // Gets rid of that annoying logging exception message generated by the uHttpSharp library.  --Kris

            // Open the browser to the Reddit authentication page.  Once the user clicks "accept", Reddit will redirect the browser to localhost:8080, where AwaitCallback will take over.  --Kris
            OpenBrowser(authTokenRetrieverLib.AuthURL());

            while (authTokenRetrieverLib.AccessToken == null)
            {
                Thread.Sleep(1000);
            }

            authTokenRetrieverLib.StopListening();

            return authTokenRetrieverLib.AccessToken;

            //authTokenRetrieverLib.AuthSuccess += AuthSuccess;
        }

        private void OpenBrowser(string authUrl = "about:blank")
        {
            try
            {
                ProcessStartInfo processStartInfo = new ProcessStartInfo(authUrl);
                Process.Start(processStartInfo);
            }
            catch (System.ComponentModel.Win32Exception)
            {
                // This typically occurs if the runtime doesn't know where your browser is.  Use BrowserPath for when this happens.  --Kris
                ProcessStartInfo processStartInfo = new ProcessStartInfo(_systemVariables.BrowserPath)
                {
                    Arguments = authUrl
                };

                Process.Start(processStartInfo);
            }
        }
    }
}
